// Venues.tsx
import { useEffect, useState } from 'react';
import { fetchVenues, createVenue, updateVenue } from '../api/venueService';
import { Venue, VenueType } from '../types';
import Modal from '../components/Modal';
import { getJwt, getUserRole } from '../utils/auth';
import './Venues.css';

export default function Venues() {
  const [venues, setVenues] = useState<Venue[]>([]);
  const [filter, setFilter] = useState<VenueType | 'all'>('all');
  const [loading, setLoading] = useState(false);
  const [isModalOpen, setModalOpen] = useState(false);
  const [editing, setEditing] = useState<Venue | null>(null);

  const isAdmin = getUserRole() === 'admin';

  useEffect(() => {
    (async () => {
      setLoading(true);
      try {
        const data = await fetchVenues();
        setVenues(data);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  const closeModal = () => {
    setEditing(null);
    setModalOpen(false);
  };

  async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    const form = e.currentTarget;
    const fd = new FormData(form);
    const payload = {
      name: fd.get('name') as string,
      location: fd.get('location') as string,
      type: fd.get('type') as VenueType,
      description: fd.get('description') as string,
    };

    if (editing) {
      const updated = await updateVenue(editing.id, payload);
      setVenues(v => v.map(it => it.id === updated.id ? updated : it));
    } else {
      const created = await createVenue(payload);
      setVenues(v => [created, ...v]);
    }
    closeModal();
  }

  const visible = filter === 'all' ? venues : venues.filter(v => v.type === filter);

  return (
    <div className="venues-wrapper">
      <div className="venues-page">
        <h1>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏—Ö –º–∞–π–¥–∞–Ω—á–∏–∫—ñ–≤</h1>
        <select
          value={filter}
          onChange={e => setFilter(e.target.value as any)}
          className="type-filter"
        >
          <option value="all">–£—Å—ñ —Ç–∏–ø–∏</option>
          <option value="football">–§—É—Ç–±–æ–ª</option>
          <option value="tennis">–¢–µ–Ω—ñ—Å</option>
          <option value="basketball">–ë–∞—Å–∫–µ—Ç–±–æ–ª</option>
          <option value="other">–Ü–Ω—à–µ</option>
        </select>

        {loading && <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è‚Ä¶</p>}

        <div className="grid centered-grid">
          {visible.map(v => (
            <div key={v.id} className="venue-card">
              <div className="card-content">
                <h3>{v.name}</h3>
                <p className="location">üìç {v.location}</p>
                <p className="type">–¢–∏–ø: <b>{v.type}</b></p>
                <p className="descr">{v.description}</p>
              </div>
              {isAdmin && (
                <button
                  className="edit-btn"
                  onClick={() => {
                    setEditing(v);
                    setModalOpen(true);
                  }}
                >
                  ‚úé –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                </button>
              )}
            </div>
          ))}
        </div>

        {isAdmin && (
          <button
            className="fab"
            onClick={() => {
              setEditing(null);
              setModalOpen(true);
            }}
          >
            Ôºã
          </button>
        )}
      </div>

      <Modal open={isModalOpen} onClose={closeModal}>
        <form className="venue-form" onSubmit={handleSubmit}>
          <h2>{editing ? '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏' : '–ù–æ–≤–∏–π'} –º–∞–π–¥–∞–Ω—á–∏–∫</h2>

          <input name="name" defaultValue={editing?.name} placeholder="–ù–∞–∑–≤–∞" required />
          <input name="location" defaultValue={editing?.location} placeholder="–õ–æ–∫–∞—Ü—ñ—è" required />

          <select name="type" defaultValue={editing?.type ?? 'football'}>
            <option value="football">–§—É—Ç–±–æ–ª</option>
            <option value="tennis">–¢–µ–Ω—ñ—Å</option>
            <option value="basketball">–ë–∞—Å–∫–µ—Ç–±–æ–ª</option>
            <option value="other">–Ü–Ω—à–µ</option>
          </select>

          <textarea name="description" defaultValue={editing?.description} placeholder="–û–ø–∏—Å" />

          <div className="actions">
            <button type="submit">–ó–±–µ—Ä–µ–≥—Ç–∏</button>
            <button type="button" onClick={closeModal}>–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
          </div>
        </form>
      </Modal>
    </div>
  );
} 