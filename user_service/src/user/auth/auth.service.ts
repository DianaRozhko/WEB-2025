// user-service/src/user/auth/auth.service.ts

import { Injectable } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { UserService } from '../user.service';
import { User } from '../user.entity';
import * as bcrypt from 'bcryptjs';

@Injectable()
export class AuthService {
  constructor(
    private readonly usersService: UserService,
    private readonly jwtService: JwtService,
  ) {}

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î email —Ç–∞ –ø–∞—Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–æ–≤–µ—Ä—Ç–∞—î —Å—É—Ç–Ω—ñ—Å—Ç—å User, —è–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ.
   */
  async validateUser(email: string, rawPassword: string): Promise<User | null> {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ email
    const user = await this.usersService.findByEmail(email);
    if (!user) {
      // –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º email
      return null;
    }

    // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π –ø–∞—Ä–æ–ª—å –∑ —Ö–µ—à–µ–º —É –ë–î
    const passwordMatches = await bcrypt.compare(rawPassword, user.password);
    if (!passwordMatches) {
      // –ü–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π
      return null;
    }
    // –Ø–∫—â–æ –≤—Å–µ –≥–∞—Ä–∞–∑–¥, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    return user;
  }

  /**
   * –§–æ—Ä–º—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î JWT-—Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
   */
  async login(user: User) {
    const payload = {
      email: user.email,
      sub: user.id,
      role: user.role, // üëà –¥–æ–¥–∞—î–º–æ —Ä–æ–ª—å –¥–æ —Ç–æ–∫–µ–Ω–∞
    };
    return {
      access_token: this.jwtService.sign(payload),
    };
  }
  
}
